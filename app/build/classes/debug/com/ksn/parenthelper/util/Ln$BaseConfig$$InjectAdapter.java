// Code generated by dagger-compiler.  Do not edit.
package com.ksn.parenthelper.util;


import dagger.internal.Binding;
import dagger.internal.Linker;
import java.util.Set;
import javax.inject.Provider;

/**
 * A {@code Binder<Ln.BaseConfig>} implementation which satisfies
 * Dagger's infrastructure requirements including:
 * 
 * Owning the dependency links between {@code Ln.BaseConfig} and its
 * dependencies.
 * 
 * Being a {@code Provider<Ln.BaseConfig>} and handling creation and
 * preparation of object instances.
 */
public final class Ln$BaseConfig$$InjectAdapter extends Binding<Ln.BaseConfig>
    implements Provider<Ln.BaseConfig> {
  private Binding<android.app.Application> context;

  public Ln$BaseConfig$$InjectAdapter() {
    super("com.ksn.parenthelper.util.Ln$BaseConfig", "members/com.ksn.parenthelper.util.Ln$BaseConfig", NOT_SINGLETON, Ln.BaseConfig.class);
  }

  /**
   * Used internally to link bindings/providers together at run time
   * according to their dependency graph.
   */
  @Override
  @SuppressWarnings("unchecked")
  public void attach(Linker linker) {
    context = (Binding<android.app.Application>) linker.requestBinding("android.app.Application", Ln.BaseConfig.class);
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
    getBindings.add(context);
  }

  /**
   * Returns the fully provisioned instance satisfying the contract for
   * {@code Provider<Ln.BaseConfig>}.
   */
  @Override
  public Ln.BaseConfig get() {
    Ln.BaseConfig result = new Ln.BaseConfig(context.get());
    return result;
  }
}
