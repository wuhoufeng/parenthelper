// Code generated by dagger-compiler.  Do not edit.
package com.ksn.parenthelper;


import dagger.internal.Binding;
import dagger.internal.Linker;
import dagger.internal.ModuleAdapter;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;

/**
 * A manager of modules and provides adapters allowing for proper linking and
 * instance provision of types served by {@code @Provides} methods.
 */
public final class BootstrapModule$$ModuleAdapter extends ModuleAdapter<BootstrapModule> {
  private static final String[] INJECTS = { "members/com.ksn.parenthelper.BootstrapApplication", "members/com.ksn.parenthelper.authenticator.BootstrapAuthenticatorActivity", "members/com.ksn.parenthelper.ui.MainActivity", "members/com.ksn.parenthelper.ui.BootstrapTimerActivity", "members/com.ksn.parenthelper.ui.CheckInsListFragment", "members/com.ksn.parenthelper.ui.NavigationDrawerFragment", "members/com.ksn.parenthelper.ui.NewsActivity", "members/com.ksn.parenthelper.ui.NewsListFragment", "members/com.ksn.parenthelper.ui.UserActivity", "members/com.ksn.parenthelper.ui.UserListFragment", "members/com.ksn.parenthelper.core.TimerService", "members/com.ksn.parenthelper.ui.HomeWorkActivity", "members/com.ksn.parenthelper.ui.SecurityActivity", "members/com.ksn.parenthelper.ui.MessageActivity", };
  private static final Class<?>[] STATIC_INJECTIONS = { };
  private static final Class<?>[] INCLUDES = { };

  public BootstrapModule$$ModuleAdapter() {
    super(INJECTS, STATIC_INJECTIONS, false /*overrides*/, INCLUDES, false /*complete*/, false /*library*/);
  }

  @Override
  protected BootstrapModule newModule() {
    return new com.ksn.parenthelper.BootstrapModule();
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getBindings(Map<String, Binding<?>> map) {
    map.put("com.squareup.otto.Bus", new ProvideOttoBusProvidesAdapter(module));
    map.put("com.ksn.parenthelper.authenticator.LogoutService", new ProvideLogoutServiceProvidesAdapter(module));
    map.put("com.ksn.parenthelper.core.BootstrapService", new ProvideBootstrapServiceProvidesAdapter(module));
    map.put("com.ksn.parenthelper.BootstrapServiceProvider", new ProvideBootstrapServiceProviderProvidesAdapter(module));
    map.put("com.ksn.parenthelper.authenticator.ApiKeyProvider", new ProvideApiKeyProviderProvidesAdapter(module));
    map.put("com.google.gson.Gson", new ProvideGsonProvidesAdapter(module));
    map.put("com.ksn.parenthelper.core.RestErrorHandler", new ProvideRestErrorHandlerProvidesAdapter(module));
    map.put("com.ksn.parenthelper.core.RestAdapterRequestInterceptor", new ProvideRestAdapterRequestInterceptorProvidesAdapter(module));
    map.put("retrofit.RestAdapter", new ProvideRestAdapterProvidesAdapter(module));
  }

  /**
   * A {@code Binder<com.squareup.otto.Bus>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   * 
   * Being a {@code Provider<com.squareup.otto.Bus>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideOttoBusProvidesAdapter extends Binding<com.squareup.otto.Bus>
      implements Provider<com.squareup.otto.Bus> {
    private final BootstrapModule module;

    public ProvideOttoBusProvidesAdapter(BootstrapModule module) {
      super("com.squareup.otto.Bus", null, IS_SINGLETON, "com.ksn.parenthelper.BootstrapModule.provideOttoBus()");
      this.module = module;
      setLibrary(false);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.squareup.otto.Bus>}.
     */
    @Override
    public com.squareup.otto.Bus get() {
      return module.provideOttoBus();
    }
  }

  /**
   * A {@code Binder<com.ksn.parenthelper.authenticator.LogoutService>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   * 
   * Owning the dependency links between {@code com.ksn.parenthelper.authenticator.LogoutService} and its
   * dependencies.
   * 
   * Being a {@code Provider<com.ksn.parenthelper.authenticator.LogoutService>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideLogoutServiceProvidesAdapter extends Binding<com.ksn.parenthelper.authenticator.LogoutService>
      implements Provider<com.ksn.parenthelper.authenticator.LogoutService> {
    private final BootstrapModule module;
    private Binding<android.content.Context> context;
    private Binding<android.accounts.AccountManager> accountManager;

    public ProvideLogoutServiceProvidesAdapter(BootstrapModule module) {
      super("com.ksn.parenthelper.authenticator.LogoutService", null, IS_SINGLETON, "com.ksn.parenthelper.BootstrapModule.provideLogoutService()");
      this.module = module;
      setLibrary(false);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      context = (Binding<android.content.Context>) linker.requestBinding("android.content.Context", BootstrapModule.class);
      accountManager = (Binding<android.accounts.AccountManager>) linker.requestBinding("android.accounts.AccountManager", BootstrapModule.class);
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(context);
      getBindings.add(accountManager);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.ksn.parenthelper.authenticator.LogoutService>}.
     */
    @Override
    public com.ksn.parenthelper.authenticator.LogoutService get() {
      return module.provideLogoutService(context.get(), accountManager.get());
    }
  }

  /**
   * A {@code Binder<com.ksn.parenthelper.core.BootstrapService>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   * 
   * Owning the dependency links between {@code com.ksn.parenthelper.core.BootstrapService} and its
   * dependencies.
   * 
   * Being a {@code Provider<com.ksn.parenthelper.core.BootstrapService>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideBootstrapServiceProvidesAdapter extends Binding<com.ksn.parenthelper.core.BootstrapService>
      implements Provider<com.ksn.parenthelper.core.BootstrapService> {
    private final BootstrapModule module;
    private Binding<retrofit.RestAdapter> restAdapter;

    public ProvideBootstrapServiceProvidesAdapter(BootstrapModule module) {
      super("com.ksn.parenthelper.core.BootstrapService", null, NOT_SINGLETON, "com.ksn.parenthelper.BootstrapModule.provideBootstrapService()");
      this.module = module;
      setLibrary(false);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      restAdapter = (Binding<retrofit.RestAdapter>) linker.requestBinding("retrofit.RestAdapter", BootstrapModule.class);
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(restAdapter);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.ksn.parenthelper.core.BootstrapService>}.
     */
    @Override
    public com.ksn.parenthelper.core.BootstrapService get() {
      return module.provideBootstrapService(restAdapter.get());
    }
  }

  /**
   * A {@code Binder<com.ksn.parenthelper.BootstrapServiceProvider>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   * 
   * Owning the dependency links between {@code com.ksn.parenthelper.BootstrapServiceProvider} and its
   * dependencies.
   * 
   * Being a {@code Provider<com.ksn.parenthelper.BootstrapServiceProvider>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideBootstrapServiceProviderProvidesAdapter extends Binding<BootstrapServiceProvider>
      implements Provider<BootstrapServiceProvider> {
    private final BootstrapModule module;
    private Binding<retrofit.RestAdapter> restAdapter;
    private Binding<com.ksn.parenthelper.authenticator.ApiKeyProvider> apiKeyProvider;

    public ProvideBootstrapServiceProviderProvidesAdapter(BootstrapModule module) {
      super("com.ksn.parenthelper.BootstrapServiceProvider", null, NOT_SINGLETON, "com.ksn.parenthelper.BootstrapModule.provideBootstrapServiceProvider()");
      this.module = module;
      setLibrary(false);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      restAdapter = (Binding<retrofit.RestAdapter>) linker.requestBinding("retrofit.RestAdapter", BootstrapModule.class);
      apiKeyProvider = (Binding<com.ksn.parenthelper.authenticator.ApiKeyProvider>) linker.requestBinding("com.ksn.parenthelper.authenticator.ApiKeyProvider", BootstrapModule.class);
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(restAdapter);
      getBindings.add(apiKeyProvider);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.ksn.parenthelper.BootstrapServiceProvider>}.
     */
    @Override
    public BootstrapServiceProvider get() {
      return module.provideBootstrapServiceProvider(restAdapter.get(), apiKeyProvider.get());
    }
  }

  /**
   * A {@code Binder<com.ksn.parenthelper.authenticator.ApiKeyProvider>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   * 
   * Owning the dependency links between {@code com.ksn.parenthelper.authenticator.ApiKeyProvider} and its
   * dependencies.
   * 
   * Being a {@code Provider<com.ksn.parenthelper.authenticator.ApiKeyProvider>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideApiKeyProviderProvidesAdapter extends Binding<com.ksn.parenthelper.authenticator.ApiKeyProvider>
      implements Provider<com.ksn.parenthelper.authenticator.ApiKeyProvider> {
    private final BootstrapModule module;
    private Binding<android.accounts.AccountManager> accountManager;

    public ProvideApiKeyProviderProvidesAdapter(BootstrapModule module) {
      super("com.ksn.parenthelper.authenticator.ApiKeyProvider", null, NOT_SINGLETON, "com.ksn.parenthelper.BootstrapModule.provideApiKeyProvider()");
      this.module = module;
      setLibrary(false);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      accountManager = (Binding<android.accounts.AccountManager>) linker.requestBinding("android.accounts.AccountManager", BootstrapModule.class);
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(accountManager);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.ksn.parenthelper.authenticator.ApiKeyProvider>}.
     */
    @Override
    public com.ksn.parenthelper.authenticator.ApiKeyProvider get() {
      return module.provideApiKeyProvider(accountManager.get());
    }
  }

  /**
   * A {@code Binder<com.google.gson.Gson>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   * 
   * Being a {@code Provider<com.google.gson.Gson>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideGsonProvidesAdapter extends Binding<com.google.gson.Gson>
      implements Provider<com.google.gson.Gson> {
    private final BootstrapModule module;

    public ProvideGsonProvidesAdapter(BootstrapModule module) {
      super("com.google.gson.Gson", null, NOT_SINGLETON, "com.ksn.parenthelper.BootstrapModule.provideGson()");
      this.module = module;
      setLibrary(false);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.google.gson.Gson>}.
     */
    @Override
    public com.google.gson.Gson get() {
      return module.provideGson();
    }
  }

  /**
   * A {@code Binder<com.ksn.parenthelper.core.RestErrorHandler>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   * 
   * Owning the dependency links between {@code com.ksn.parenthelper.core.RestErrorHandler} and its
   * dependencies.
   * 
   * Being a {@code Provider<com.ksn.parenthelper.core.RestErrorHandler>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideRestErrorHandlerProvidesAdapter extends Binding<com.ksn.parenthelper.core.RestErrorHandler>
      implements Provider<com.ksn.parenthelper.core.RestErrorHandler> {
    private final BootstrapModule module;
    private Binding<com.squareup.otto.Bus> bus;

    public ProvideRestErrorHandlerProvidesAdapter(BootstrapModule module) {
      super("com.ksn.parenthelper.core.RestErrorHandler", null, NOT_SINGLETON, "com.ksn.parenthelper.BootstrapModule.provideRestErrorHandler()");
      this.module = module;
      setLibrary(false);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      bus = (Binding<com.squareup.otto.Bus>) linker.requestBinding("com.squareup.otto.Bus", BootstrapModule.class);
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(bus);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.ksn.parenthelper.core.RestErrorHandler>}.
     */
    @Override
    public com.ksn.parenthelper.core.RestErrorHandler get() {
      return module.provideRestErrorHandler(bus.get());
    }
  }

  /**
   * A {@code Binder<com.ksn.parenthelper.core.RestAdapterRequestInterceptor>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   * 
   * Owning the dependency links between {@code com.ksn.parenthelper.core.RestAdapterRequestInterceptor} and its
   * dependencies.
   * 
   * Being a {@code Provider<com.ksn.parenthelper.core.RestAdapterRequestInterceptor>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideRestAdapterRequestInterceptorProvidesAdapter extends Binding<com.ksn.parenthelper.core.RestAdapterRequestInterceptor>
      implements Provider<com.ksn.parenthelper.core.RestAdapterRequestInterceptor> {
    private final BootstrapModule module;
    private Binding<com.ksn.parenthelper.core.UserAgentProvider> userAgentProvider;

    public ProvideRestAdapterRequestInterceptorProvidesAdapter(BootstrapModule module) {
      super("com.ksn.parenthelper.core.RestAdapterRequestInterceptor", null, NOT_SINGLETON, "com.ksn.parenthelper.BootstrapModule.provideRestAdapterRequestInterceptor()");
      this.module = module;
      setLibrary(false);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      userAgentProvider = (Binding<com.ksn.parenthelper.core.UserAgentProvider>) linker.requestBinding("com.ksn.parenthelper.core.UserAgentProvider", BootstrapModule.class);
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(userAgentProvider);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.ksn.parenthelper.core.RestAdapterRequestInterceptor>}.
     */
    @Override
    public com.ksn.parenthelper.core.RestAdapterRequestInterceptor get() {
      return module.provideRestAdapterRequestInterceptor(userAgentProvider.get());
    }
  }

  /**
   * A {@code Binder<retrofit.RestAdapter>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   * 
   * Owning the dependency links between {@code retrofit.RestAdapter} and its
   * dependencies.
   * 
   * Being a {@code Provider<retrofit.RestAdapter>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideRestAdapterProvidesAdapter extends Binding<retrofit.RestAdapter>
      implements Provider<retrofit.RestAdapter> {
    private final BootstrapModule module;
    private Binding<com.ksn.parenthelper.core.RestErrorHandler> restErrorHandler;
    private Binding<com.ksn.parenthelper.core.RestAdapterRequestInterceptor> restRequestInterceptor;
    private Binding<com.google.gson.Gson> gson;

    public ProvideRestAdapterProvidesAdapter(BootstrapModule module) {
      super("retrofit.RestAdapter", null, NOT_SINGLETON, "com.ksn.parenthelper.BootstrapModule.provideRestAdapter()");
      this.module = module;
      setLibrary(false);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      restErrorHandler = (Binding<com.ksn.parenthelper.core.RestErrorHandler>) linker.requestBinding("com.ksn.parenthelper.core.RestErrorHandler", BootstrapModule.class);
      restRequestInterceptor = (Binding<com.ksn.parenthelper.core.RestAdapterRequestInterceptor>) linker.requestBinding("com.ksn.parenthelper.core.RestAdapterRequestInterceptor", BootstrapModule.class);
      gson = (Binding<com.google.gson.Gson>) linker.requestBinding("com.google.gson.Gson", BootstrapModule.class);
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(restErrorHandler);
      getBindings.add(restRequestInterceptor);
      getBindings.add(gson);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<retrofit.RestAdapter>}.
     */
    @Override
    public retrofit.RestAdapter get() {
      return module.provideRestAdapter(restErrorHandler.get(), restRequestInterceptor.get(), gson.get());
    }
  }
}
